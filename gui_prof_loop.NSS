#include "nw_i0_spells"
#include "profession_include"

void CloseInterface(object oPC)
{
	DeleteLocalObject(oPC, "PROF_POOL");
	DeleteLocalString(oPC, "PROF_SOUND");
	DeleteLocalString(oPC, "FAIL_TAG");
	DeleteLocalString(oPC, "OUTPUT_TAG");
	DeleteLocalString(oPC, "INPUT_TAG_A");
	DeleteLocalString(oPC, "INPUT_TAG_B");
	DeleteLocalInt(oPC, "INPUT_QTY_A");
	DeleteLocalInt(oPC, "INPUT_QTY_B");
	DeleteLocalInt(oPC, "OUTPUT_QTY");
	DeleteLocalInt(oPC, "OUTPUT_MULT");
	DeleteLocalInt(oPC, "OUTPUT_REQ");
	DeleteLocalInt(oPC, "OUTPUT_STOP");
	DeleteLocalInt(oPC, "OUTPUT_XP");
	DeleteLocalInt(oPC, "PROF_SKILL");
	DeleteLocalInt(oPC, "SUCCESS_CHANCE");
	DeleteLocalFloat(oPC, "PROF_TIME");
	DeleteLocalFloat(oPC, "PROF_LOOP");
	RemoveSpecificEffect(EFFECT_TYPE_CUTSCENEIMMOBILIZE, oPC);
	CloseGUIScreen(oPC, "SCREEN_PROF_LOOP");
	AssignCommand(oPC, ClearAllActions());
	AssignCommand(oPC, ReallyPlayCustomAnimation(oPC, "idle", TRUE));
}

void RespawnNode(int nPOOL, string sPOOL, location lPOOL)
{
	object oNODE = CreateObject(nPOOL, sPOOL, lPOOL, TRUE);
}

void GatherResource(object oPC)
{
	if (GetInventoryNum(oPC) > 127)
	{
		SendMessageToPC(oPC, "Your inventory is full.");
		CloseInterface(oPC);
		return;
	}
	object oPOOL = GetLocalObject(oPC, "PROF_POOL");
	string sADD = GetLocalString(oPOOL, "ADD");
	object oADD = GetItemPossessedBy(oPC, sADD);
	if ((sADD != "") && (oADD == OBJECT_INVALID))
	{
		SendMessageToPC(oPC, "You ran out of bait.");
		CloseInterface(oPC);
		return;
	}	
	string sDROP = GetLocalString(oPOOL, "DROP");
	int nCHANCE = GetLocalInt(oPOOL, "CHANCE");
	int nXP = GetLocalInt(oPOOL, "XP");
	int nSKILL = GetLocalInt(oPOOL, "SKILL");
	ReallyPlaySound(GetLocation(oPC), GetLocalString(oPC, "PROF_SOUND"));
	GiveCraftXP(oPC, nSKILL, nXP);
	CreateItemOnObject(sDROP, oPC);
	if (sADD != "")
	{
		int nADD = GetItemStackSize(oADD);
		if (nADD > 1) SetItemStackSize(oADD, nADD - 1);
		else DestroyObject(oADD);
	}
	if (Random(100) < nCHANCE)
	{
		CloseInterface(oPC);
		float fRESPAWN = GetLocalFloat(oPOOL, "RESPAWN");
		SendMessageToPC(oPC, "This resource node has been depleted.");
		int nPOOL = GetObjectType(oPOOL);
		string sPOOL = GetTag(oPOOL);
		location lPOOL = GetLocation(oPOOL);
		DelayCommand(fRESPAWN, RespawnNode(nPOOL, sPOOL, lPOOL));
		DestroyObject(oPOOL);
	}
}

void ProduceItem(object oPC)
{
	if (GetInventoryNum(oPC) >= 128)
	{
		SendMessageToPC(oPC, "Your inventory is full.");
		CloseInterface(oPC);
		return;
	}
	string sINPUT_A = GetLocalString(oPC, "INPUT_TAG_A");
	string sINPUT_B = GetLocalString(oPC, "INPUT_TAG_B");
	int nQTY_A = GetLocalInt(oPC, "INPUT_QTY_A");
	int nQTY_B = GetLocalInt(oPC, "INPUT_QTY_B");
	if (GetItemQuantity(oPC, sINPUT_A) < nQTY_A)
	{
		SendMessageToPC(oPC, "You are missing some of the required reagents.");
		CloseInterface(oPC);
		return;
	}
	if (GetItemQuantity(oPC, sINPUT_B) < nQTY_B)
	{
		SendMessageToPC(oPC, "You are missing some of the required reagents.");
		CloseInterface(oPC);
		return;
	}
	object oPOOL = GetLocalObject(oPC, "PROF_POOL");
	if (GetLocalInt(oPOOL, "EXTINCT") == TRUE)
	{
		SendMessageToPC(oPC, "The fire is gone.");
		CloseInterface(oPC);
		return;
	}
	string sFAIL = GetLocalString(oPC, "FAIL_TAG");
	string sOUTPUT = GetLocalString(oPC, "OUTPUT_TAG");
	int nSKILL = GetLocalInt(oPC, "PROF_SKILL");
	int nFAIL = 10 * (100 - GetLocalInt(oPC, "SUCCESS_CHANCE"));
	if (sOUTPUT == "ironbar")
	{
		if (GetTag(GetItemInSlot(INVENTORY_SLOT_LEFTRING, oPC)) == "rubyringe") nFAIL = 0;
		else if (GetTag(GetItemInSlot(INVENTORY_SLOT_RIGHTRING, oPC)) == "rubyringe") nFAIL = 0;
	}
	int nMULT = GetLocalInt(oPC, "OUTPUT_MULT");
	int nXP = GetLocalInt(oPC, "OUTPUT_XP");
	string sTXT = "Recipe failed.";
	if (nSKILL == SKILL_COOKING)
	{
		int nLEVEL = GetSkillRank(nSKILL, oPC);
		int nREQ = GetLocalInt(oPC, "OUTPUT_REQ");
		int nSTOP = GetLocalInt(oPC, "OUTPUT_STOP");
		if (nQTY_A < 1) nQTY_A = 1;
		float fMULT_A = IntToFloat(nSTOP - nREQ);
		float fMULT_B = IntToFloat(nLEVEL - nREQ);
		float fDEC = 55.0 / fMULT_A;
		float fFAIL = 55.0 - (fMULT_B * fDEC);
		if (fFAIL < 0.0) fFAIL = 0.0;
		nFAIL = FloatToInt(fFAIL * 10.0);
		sFAIL = "burntmeat";
		sTXT = "The food was burned.";
	}
	if (nFAIL < 0) nFAIL = 0;
	if (1 + Random(1000) > nFAIL)
	{
		int nQTY = GetLocalInt(oPC, "OUTPUT_QTY");
		if (nQTY < 1) nQTY = 1;
		CreateItemOnObject(sOUTPUT, oPC, nQTY);
		GiveCraftXP(oPC, nSKILL, nXP);
	}
	else
	{
		string sBURN = IntToString(nFAIL);
		int nFIG = 3;
		if (nFAIL < 1000) nFIG = 2;
		if (nFAIL < 100) nFIG = 1;
		string sRATE = GetStringLeft(sBURN, nFIG);
		if (nFAIL < 10) sRATE = "0";
		sRATE = sRATE + "," + GetStringRight(sBURN, 1) + "%";
		SendMessageToPC(oPC, HSS_FEEDBACK_COLOUR + sTXT + " (" + sRATE + " chance.)");
		if (sFAIL != "") CreateItemOnObject(sFAIL, oPC, 1);
	}
	RemoveItems(oPC, sINPUT_A, nQTY_A);
	RemoveItems(oPC, sINPUT_B, nQTY_B);
	SetLocalInt(oPC, "OUTPUT_MULT", nMULT - 1);
	if (nMULT <= 1) CloseInterface(oPC);
}

void UpdateInterface(object oPC)
{
	int nSKILL = GetLocalInt(oPC, "PROF_SKILL");
	string sTEXT = "Crafting...";
	float fLOOP = 3.0;
	switch (nSKILL)
	{
		case SKILL_FISHING:
		case SKILL_WOODCUTTING:
		case SKILL_MINING:
			sTEXT = "Gathering...";
			fLOOP = GetLocalFloat(oPC, "PROF_LOOP");
			break;
		case SKILL_COOKING: sTEXT = "Cooking..."; break;
		case SKILL_SMITHING: sTEXT = "Smithing..."; break;
	}
	SetGUIObjectText(oPC, "SCREEN_PROF_LOOP", "LOOP_TEXT", -1, sTEXT);
	float fTIME = GetLocalFloat(oPC, "PROF_TIME") + 0.1;
	float fBAR = fTIME / fLOOP;
	if (fBAR >= 1.00)
	{
		fBAR = 1.0;
		fTIME = 0.0;
		switch (nSKILL)
		{
			case SKILL_FISHING:
			case SKILL_WOODCUTTING:
			case SKILL_MINING:
				GatherResource(oPC);
				break;
			default: ProduceItem(oPC);
		}
	}
	SetGUIProgressBarPosition(oPC, "SCREEN_PROF_LOOP", "GATHER_PROGRESS", fBAR);
	SetLocalFloat(oPC, "PROF_TIME", fTIME);
}

void main(string sCOMMAND)
{
	object oPC = OBJECT_SELF;
	if (sCOMMAND == "UPDATE") UpdateInterface(oPC);
	else CloseInterface(oPC);
}